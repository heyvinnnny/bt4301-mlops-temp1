{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/kevin/OneDrive/Desktop/NUS/Y3S2/BT4301/Project/bt4301-mlops-temp1/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/kevin/OneDrive/Desktop/NUS/Y3S2/BT4301/Project/bt4301-mlops-temp1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { MongoClient } from 'mongodb';\n\n//able to input user details into firebase but there is some issues with validation (e.g. no message prompt)\nexport default {\n  setup: function setup() {\n    var name = ref('');\n    var email = ref('');\n    var password = ref('');\n    var confirmPassword = ref('');\n    var access = ref('');\n    var register = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var url, dbName, client;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(password.value !== confirmPassword.value)) {\n                _context.next = 3;\n                break;\n              }\n              alert('Passwords do not match');\n              return _context.abrupt(\"return\");\n            case 3:\n              // Connection URL\n              url = 'mongodb://localhost:27017'; // Database Name\n              dbName = 'bt4301-mlops'; // Create a new MongoClient\n              client = new MongoClient(url);\n              client.connect(function (err) {\n                console.log(\"Connected successfully to server\");\n                var db = client.db(dbName);\n\n                // Get the collection\n                var collection = db.collection('users');\n\n                // Insert data into the collection\n                collection.insertOne({\n                  name: name,\n                  email: email,\n                  password: password,\n                  access: access\n                }, function (err, result) {\n                  console.log(\"Inserted document into the collection\");\n                  client.close();\n                });\n              });\n              return _context.abrupt(\"return\", {\n                name: name,\n                email: email,\n                password: password,\n                confirmPassword: confirmPassword,\n                access: access,\n                register: register\n              });\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function register() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n};\n\n// import { ref } from 'vue';\n// import \"firebase/compat/auth\";\n// import \"firebaseui/dist/firebaseui.css\";\n// import { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\n// import { doc, getDocs, addDoc, getFirestore, collection } from \"firebase/firestore\";\n// import router from '../../router';\n\n// //able to input user details into firebase but there is some issues with validation (e.g. no message prompt)\n// export default {\n//   setup() {\n//     const name = ref('')\n//     const email = ref('')\n//     const password = ref('')\n//     const confirmPassword = ref('')\n//     const access = ref('')\n\n//     const register = async () => {\n//       if (password.value !== confirmPassword.value) {\n//         alert('Passwords do not match')\n//         return\n//       }\n\n//       try {\n//         const auth = getAuth();\n//         const db = getFirestore();\n//         const userCredential = await createUserWithEmailAndPassword(auth, email.value, password.value)\n//         const user = userCredential.user\n\n//         alert('Registration successful!')\n//         //this.$toast.success(\"Welcome to DataPower\");\n//         router.push('/login')\n\n//         //adding info works well (for authentication only)\n//         await addDoc(collection(db, 'users'), {\n//           name: name.value,\n//           email: email.value,\n//           password: password.value,\n//           access: access.value,\n//           uid: user.uid,\n//         })\n//         //this.$toast.success(\"You have registered successfully!\");\n\n//         //this is not working\n//         //this.$router.push('/login')\n\n//       } catch (error) {\n//         // error do prompt though\n//         //this.$toast.error(error.message);\n//         alert('Registration failed. Please try again.')\n//       }\n//     }\n\n//     return { name, email, password, confirmPassword, access, register }\n//   }\n// }","map":{"version":3,"names":["MongoClient","setup","name","ref","email","password","confirmPassword","access","register","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","dbName","client","wrap","_callee$","_context","prev","next","value","alert","abrupt","connect","err","console","log","db","collection","insertOne","result","close","stop","apply","arguments"],"sources":["src/components/Cards/RegisterCard.vue"],"sourcesContent":["<template>\r\n    <div class=\"register-form\" id=\"app\">\r\n      <form @submit.prevent=\"register\">\r\n        <div>\r\n          <label>Name</label>\r\n          <input v-model=\"name\" type=\"text\" required />\r\n        </div>\r\n        <div>\r\n          <label>Email</label>\r\n          <input v-model=\"email\" type=\"email\" required />\r\n        </div>\r\n        <div>\r\n          <label>Password</label>\r\n          <input v-model=\"password\" type=\"password\" required />\r\n        </div>\r\n        <div>\r\n          <label>Confirm Password</label>\r\n          <input v-model=\"confirmPassword\" type=\"password\" required />\r\n        </div>\r\n        <div>\r\n          <label>Role</label>\r\n          <select v-model=\"access\" required>\r\n            <option value=\"admin\">Admin</option>\r\n            <option value=\"executive\">Executive</option>\r\n            <option value=\"manager\">Manager</option>\r\n          </select>\r\n        </div>\r\n        <button type=\"submit\">Register</button>\r\n        \r\n      </form>\r\n    </div>\r\n\r\n    \r\n</template>\r\n\r\n<script>\r\nimport { MongoClient } from 'mongodb';\r\n\r\n//able to input user details into firebase but there is some issues with validation (e.g. no message prompt)\r\nexport default {\r\n  setup() {\r\n    const name = ref('')\r\n    const email = ref('')\r\n    const password = ref('')\r\n    const confirmPassword = ref('')\r\n    const access = ref('')\r\n\r\n    const register = async () => {\r\n      if (password.value !== confirmPassword.value) {\r\n        alert('Passwords do not match')\r\n        return\r\n      }\r\n\r\n      // Connection URL\r\n      const url = 'mongodb://localhost:27017';\r\n\r\n      // Database Name\r\n      const dbName = 'bt4301-mlops';\r\n\r\n      // Create a new MongoClient\r\n      const client = new MongoClient(url);\r\n\r\n      client.connect(function(err) {\r\n        console.log(\"Connected successfully to server\");\r\n\r\n        const db = client.db(dbName);\r\n\r\n        // Get the collection\r\n        const collection = db.collection('users');\r\n\r\n        // Insert data into the collection\r\n        collection.insertOne({ name: name, email: email, password: password, access: access }, function(err, result) {\r\n          console.log(\"Inserted document into the collection\");\r\n          client.close();\r\n        });\r\n      });\r\n    return { name, email, password, confirmPassword, access, register }\r\n    }\r\n  }\r\n}\r\n\r\n// import { ref } from 'vue';\r\n// import \"firebase/compat/auth\";\r\n// import \"firebaseui/dist/firebaseui.css\";\r\n// import { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\r\n// import { doc, getDocs, addDoc, getFirestore, collection } from \"firebase/firestore\";\r\n// import router from '../../router';\r\n  \r\n\r\n// //able to input user details into firebase but there is some issues with validation (e.g. no message prompt)\r\n// export default {\r\n//   setup() {\r\n//     const name = ref('')\r\n//     const email = ref('')\r\n//     const password = ref('')\r\n//     const confirmPassword = ref('')\r\n//     const access = ref('')\r\n\r\n//     const register = async () => {\r\n//       if (password.value !== confirmPassword.value) {\r\n//         alert('Passwords do not match')\r\n//         return\r\n//       }\r\n\r\n//       try {\r\n//         const auth = getAuth();\r\n//         const db = getFirestore();\r\n//         const userCredential = await createUserWithEmailAndPassword(auth, email.value, password.value)\r\n//         const user = userCredential.user\r\n\r\n//         alert('Registration successful!')\r\n//         //this.$toast.success(\"Welcome to DataPower\");\r\n//         router.push('/login')\r\n        \r\n        \r\n\r\n//         //adding info works well (for authentication only)\r\n//         await addDoc(collection(db, 'users'), {\r\n//           name: name.value,\r\n//           email: email.value,\r\n//           password: password.value,\r\n//           access: access.value,\r\n//           uid: user.uid,\r\n//         })\r\n//         //this.$toast.success(\"You have registered successfully!\");\r\n        \r\n//         //this is not working\r\n//         //this.$router.push('/login')\r\n        \r\n        \r\n//       } catch (error) {\r\n//         // error do prompt though\r\n//         //this.$toast.error(error.message);\r\n//         alert('Registration failed. Please try again.')\r\n//       }\r\n//     }\r\n\r\n//     return { name, email, password, confirmPassword, access, register }\r\n//   }\r\n// }\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.register-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n}\r\n\r\n.register-form input {\r\n  padding: 10px;\r\n  margin-bottom: 20px;\r\n  border-radius: 5px;\r\n  border: none;\r\n  background-color: #f3f3f3;\r\n  font-size: 16px;\r\n  width: 300px;\r\n}\r\n\r\n.register-form button {\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  border: none;\r\n  background-color: #0080ff;\r\n  color: #fff;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  width: 300px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.register-form button:hover {\r\n  background-color: #0066cc;\r\n}\r\n\r\n.register-form .error-message {\r\n  color: red;\r\n  margin-bottom: 20px;\r\n  font-size: 14px;\r\n  text-align: center;\r\n}\r\n</style>\r\n  "],"mappings":";;AAoCA,SAAAA,WAAA;;AAEA;AACA;EACAC,KAAA,WAAAA,MAAA;IACA,IAAAC,IAAA,GAAAC,GAAA;IACA,IAAAC,KAAA,GAAAD,GAAA;IACA,IAAAE,QAAA,GAAAF,GAAA;IACA,IAAAG,eAAA,GAAAH,GAAA;IACA,IAAAI,MAAA,GAAAJ,GAAA;IAEA,IAAAK,QAAA;MAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,GAAA,EAAAC,MAAA,EAAAC,MAAA;QAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAA,MACAhB,QAAA,CAAAiB,KAAA,KAAAhB,eAAA,CAAAgB,KAAA;gBAAAH,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACAE,KAAA;cAAA,OAAAJ,QAAA,CAAAK,MAAA;YAAA;cAIA;cACAV,GAAA,gCAEA;cACAC,MAAA,mBAEA;cACAC,MAAA,OAAAhB,WAAA,CAAAc,GAAA;cAEAE,MAAA,CAAAS,OAAA,WAAAC,GAAA;gBACAC,OAAA,CAAAC,GAAA;gBAEA,IAAAC,EAAA,GAAAb,MAAA,CAAAa,EAAA,CAAAd,MAAA;;gBAEA;gBACA,IAAAe,UAAA,GAAAD,EAAA,CAAAC,UAAA;;gBAEA;gBACAA,UAAA,CAAAC,SAAA;kBAAA7B,IAAA,EAAAA,IAAA;kBAAAE,KAAA,EAAAA,KAAA;kBAAAC,QAAA,EAAAA,QAAA;kBAAAE,MAAA,EAAAA;gBAAA,aAAAmB,GAAA,EAAAM,MAAA;kBACAL,OAAA,CAAAC,GAAA;kBACAZ,MAAA,CAAAiB,KAAA;gBACA;cACA;cAAA,OAAAd,QAAA,CAAAK,MAAA,WACA;gBAAAtB,IAAA,EAAAA,IAAA;gBAAAE,KAAA,EAAAA,KAAA;gBAAAC,QAAA,EAAAA,QAAA;gBAAAC,eAAA,EAAAA,eAAA;gBAAAC,MAAA,EAAAA,MAAA;gBAAAC,QAAA,EAAAA;cAAA;YAAA;YAAA;cAAA,OAAAW,QAAA,CAAAe,IAAA;UAAA;QAAA,GAAArB,OAAA;MAAA,CACA;MAAA,gBA9BAL,SAAA;QAAA,OAAAC,IAAA,CAAA0B,KAAA,OAAAC,SAAA;MAAA;IAAA,GA8BA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}